diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..5c9074e
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2022 TT1410
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/homework_1/personal_assistant/main.py b/homework_1/personal_assistant/main.py
index 1f0154d..b5b3a92 100644
--- a/homework_1/personal_assistant/main.py
+++ b/homework_1/personal_assistant/main.py
@@ -1,7 +1,7 @@
 from colorama import init, Fore
 
 from .services.db import create_all_tables
-from .services.utils.input_parser import text_parsing
+from .services.utils import text_parsing
 
 init(autoreset=True)
 
diff --git a/homework_1/personal_assistant/services/handlers/notes.py b/homework_1/personal_assistant/services/handlers/notes.py
index f4ac6b8..bd25e71 100644
--- a/homework_1/personal_assistant/services/handlers/notes.py
+++ b/homework_1/personal_assistant/services/handlers/notes.py
@@ -42,8 +42,8 @@ def search_notes_by_text(text: str) -> str:
     return format_results
 
 
-@route('search-tags')
 @input_error
+@route('search-tags')
 def search_notes_by_tags(tags: str) -> str:
     """
     By this command, the bot searches the memory for a note by tags.
@@ -61,9 +61,10 @@ def search_notes_by_tags(tags: str) -> str:
 
     format_results = ""
 
-    for key, value in results.items():
-        note = '\n\tNote: '.join([str(x.text.value) for x in value])
-        format_results += f"{key}\n\tNote: {note}\n"
+    for tag, notes_ in results.items():
+        text_notes = ''.join(['\n\tNote: ' + str(x.text.value) for x in notes_])
+
+        format_results += (tag + text_notes + '\n')
 
     return format_results
 
diff --git a/homework_1/personal_assistant/services/utils/__init__.py b/homework_1/personal_assistant/services/utils/__init__.py
index c95ff54..cc3d4df 100644
--- a/homework_1/personal_assistant/services/utils/__init__.py
+++ b/homework_1/personal_assistant/services/utils/__init__.py
@@ -1,6 +1,7 @@
 from .address_book import AddressBook
 from .notes import Notes
 from .register_handlers import register_message_handler, ROUTE_MAP
+from .input_parser import text_parsing
 
 
 __all__ = (
@@ -8,4 +9,5 @@ __all__ = (
     "Notes",
     "register_message_handler",
     "ROUTE_MAP",
+    "text_parsing"
 )
diff --git a/homework_1/personal_assistant/services/utils/address_book/birthday.py b/homework_1/personal_assistant/services/utils/address_book/birthday.py
index 352b74f..4440b33 100644
--- a/homework_1/personal_assistant/services/utils/address_book/birthday.py
+++ b/homework_1/personal_assistant/services/utils/address_book/birthday.py
@@ -6,10 +6,10 @@ from personal_assistant.services.utils.field import Field
 class Birthday(Field):
     @Field.value.setter
     def value(self, value) -> None:
-        self._value: date = self.check_date(value)
+        self._value: date = self._value_validation(value)
 
     @staticmethod
-    def check_date(value: str) -> date:
+    def _value_validation(value: str) -> date:
         """
         Format string date is YYYY.MM.DD or DD.MM.YYYY
         Instead of a dot, a comma, dash or colon is allowed
@@ -25,7 +25,7 @@ class Birthday(Field):
                 break
 
         if not args or len(args) > 2:
-            raise ValueError("Invalide date format. Date format should be YYYY.MM.DD or DD.MM.YYYY.")
+            raise ValueError("Invalid date format. Date format should be YYYY.MM.DD or DD.MM.YYYY.")
 
         if int(value) > 31:
             return date(int(value), int(args[0]), int(args[1]))
diff --git a/homework_1/personal_assistant/services/utils/address_book/email.py b/homework_1/personal_assistant/services/utils/address_book/email.py
index 2305eb6..867dcd3 100644
--- a/homework_1/personal_assistant/services/utils/address_book/email.py
+++ b/homework_1/personal_assistant/services/utils/address_book/email.py
@@ -6,10 +6,10 @@ from personal_assistant.services.utils.field import Field
 class Email(Field):
     @Field.value.setter
     def value(self, value):
-        self._value: str = self.__check_email(value)
+        self._value: str = self._value_validation(value)
 
     @staticmethod
-    def __check_email(email: str) -> str:
+    def _value_validation(email: str) -> str:
 
         pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
 
diff --git a/homework_1/personal_assistant/services/utils/address_book/name.py b/homework_1/personal_assistant/services/utils/address_book/name.py
index 3f60991..4d01c13 100644
--- a/homework_1/personal_assistant/services/utils/address_book/name.py
+++ b/homework_1/personal_assistant/services/utils/address_book/name.py
@@ -6,10 +6,10 @@ from personal_assistant.services.utils.field import Field
 class Name(Field):
     @Field.value.setter
     def value(self, value):
-        self._value: str = self.check_name(value)
+        self._value: str = self._value_validation(value)
 
     @staticmethod
-    def check_name(value: str) -> str:
+    def _value_validation(value: str) -> str:
         clean_value = (
             value.strip()
             .removeprefix("+")
diff --git a/homework_1/personal_assistant/services/utils/address_book/phone.py b/homework_1/personal_assistant/services/utils/address_book/phone.py
index 939457e..5c45139 100644
--- a/homework_1/personal_assistant/services/utils/address_book/phone.py
+++ b/homework_1/personal_assistant/services/utils/address_book/phone.py
@@ -13,10 +13,10 @@ CODES_MOBILE_UA = ['067', '096', '097', '098',
 class Phone(Field):
     @Field.value.setter
     def value(self, value):
-        self._value: int = self.__check_phone_number(value)
+        self._value: int = self._value_validation(value)
 
     @staticmethod
-    def __check_phone_number(phone: str) -> int:
+    def _value_validation(phone: str) -> int:
         clean_phone = (
                         phone.strip()
                         .removeprefix("+")
diff --git a/homework_1/personal_assistant/services/utils/address_book/record.py b/homework_1/personal_assistant/services/utils/address_book/record.py
index 339dedd..953dd0f 100644
--- a/homework_1/personal_assistant/services/utils/address_book/record.py
+++ b/homework_1/personal_assistant/services/utils/address_book/record.py
@@ -1,6 +1,7 @@
 import json
 from typing import Optional
 from datetime import date
+from abc import ABC, abstractmethod
 
 from sqlalchemy import (
     delete,
@@ -19,7 +20,52 @@ from .address import Address
 from .email import Email
 
 
-class Record(DBSession):
+class RecordABC(ABC):
+    @abstractmethod
+    def __save(self) -> None:
+        pass
+
+    @abstractmethod
+    def remove_record(self) -> None:
+        pass
+
+    @abstractmethod
+    def add_phone(self, phone: str) -> Phone:
+        pass
+
+    @abstractmethod
+    def replace_phone(self, index: int, phone: str) -> Phone:
+        pass
+
+    @abstractmethod
+    def remove_phone(self, index: int) -> Phone:
+        pass
+
+    @abstractmethod
+    def change_birthday(self, value: str) -> Birthday:
+        pass
+
+    @abstractmethod
+    def days_to_birthday(self) -> Optional[int]:
+        pass
+
+    @abstractmethod
+    def change_email(self, value: str) -> Email:
+        pass
+
+    @abstractmethod
+    def change_address(self, value: str) -> Address:
+        pass
+
+    def format_record(self) -> str:
+        pass
+
+    @abstractmethod
+    def __update_contact_db(self, request: str):
+        pass
+
+
+class Record(RecordABC, DBSession):
     def __init__(self,
                  name: str,
                  phone: Optional[str] = None,
@@ -35,9 +81,9 @@ class Record(DBSession):
         self.contact_id = contact_id
 
         if not self.contact_id:
-            self.__save_record()
+            self.__save()
 
-    def __save_record(self) -> None:
+    def __save(self) -> None:
         str_phones = json.dumps([x.value for x in self.phones])
 
         with self.db_session() as session:
@@ -74,7 +120,7 @@ class Record(DBSession):
         phone = Phone(phone)
 
         if any((phone.value == x.value) for x in self.phones):
-            raise ValueError(f"Number '{phone.value}' was already added earlier")
+            raise ValueError(f"Number Â«{phone.value}Â» was already added earlier")
 
         self.phones.append(phone)
 
diff --git a/homework_1/personal_assistant/services/utils/field.py b/homework_1/personal_assistant/services/utils/field.py
index ebd4e9f..c71f05f 100644
--- a/homework_1/personal_assistant/services/utils/field.py
+++ b/homework_1/personal_assistant/services/utils/field.py
@@ -1,5 +1,8 @@
+from abc import ABC, abstractmethod
+from typing import Any
 
-class Field:
+
+class Field(ABC):
     def __init__(self, value: str):
         self._value = None
         self.value = value
@@ -12,5 +15,13 @@ class Field:
     def value(self, value):
         self._value = value
 
+    @staticmethod
+    @abstractmethod
+    def _value_validation(value: str) -> Any:
+        pass
+
+    def __str__(self):
+        return str(self.value)
+
     def __repr__(self):
         return f"{self.__class__.__name__}(value={self.value!r})"
diff --git a/homework_1/personal_assistant/services/utils/notes/record.py b/homework_1/personal_assistant/services/utils/notes/record.py
index 38d1205..e53d527 100644
--- a/homework_1/personal_assistant/services/utils/notes/record.py
+++ b/homework_1/personal_assistant/services/utils/notes/record.py
@@ -1,5 +1,6 @@
 import json
 from typing import Optional
+from abc import ABC, abstractmethod
 
 from sqlalchemy import (
     delete,
@@ -15,7 +16,29 @@ from .text import Text
 from .tag import Tag
 
 
-class Record(DBSession):
+class RecordABC(ABC):
+    @abstractmethod
+    def __save(self) -> None:
+        pass
+
+    @abstractmethod
+    def replace_text(self, new_text: str) -> None:
+        pass
+
+    @abstractmethod
+    def add_tags(self, new_tags: list[str]) -> None:
+        pass
+
+    @abstractmethod
+    def remove_record(self) -> None:
+        pass
+
+    @abstractmethod
+    def format_record(self) -> str:
+        pass
+
+
+class Record(RecordABC, DBSession):
     def __init__(self,
                  text: str,
                  tags: Optional[list[str]] = None,
@@ -25,9 +48,9 @@ class Record(DBSession):
         self.note_id: Optional[int] = note_id
 
         if not self.note_id:
-            self.__save_record()
+            self.__save()
 
-    def __save_record(self) -> None:
+    def __save(self) -> None:
         str_tags = json.dumps([x.value for x in self.tags])
 
         with self.db_session() as session:
diff --git a/homework_1/personal_assistant/services/utils/notes/tag.py b/homework_1/personal_assistant/services/utils/notes/tag.py
index e0fc420..4e76930 100644
--- a/homework_1/personal_assistant/services/utils/notes/tag.py
+++ b/homework_1/personal_assistant/services/utils/notes/tag.py
@@ -2,4 +2,14 @@ from personal_assistant.services.utils.field import Field
 
 
 class Tag(Field):
-    pass
+    @Field.value.setter
+    def value(self, value):
+        self._value: str = self._value_validation(value)
+
+    @staticmethod
+    def _value_validation(value: str) -> str:
+        if len(value) > 30:
+            raise ValueError(f"Tag '{value}' is not valid.\n"
+                             f"Tag length must be up to 30 characters.")
+
+        return value
diff --git a/homework_1/personal_assistant/services/utils/notes/text.py b/homework_1/personal_assistant/services/utils/notes/text.py
index d9f6cb0..bff93f3 100644
--- a/homework_1/personal_assistant/services/utils/notes/text.py
+++ b/homework_1/personal_assistant/services/utils/notes/text.py
@@ -2,4 +2,14 @@ from personal_assistant.services.utils.field import Field
 
 
 class Text(Field):
-    pass
+    @Field.value.setter
+    def value(self, value):
+        self._value: str = self._value_validation(value)
+
+    @staticmethod
+    def _value_validation(value: str) -> str:
+        if len(value) > 5000:
+            raise ValueError(f"Text '{value}' is not valid.\n"
+                             f"The length of the text must not exceed 5000 characters")
+
+        return value
